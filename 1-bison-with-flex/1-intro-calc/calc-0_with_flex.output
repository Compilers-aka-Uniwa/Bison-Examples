Terminals unused in grammar

    TOKEN_ERROR


Grammar

    0 $accept: program $end

    1 program: program expr NEWLINE
    2        | ε

    3 expr: INTEGER
    4     | expr expr '+'
    5     | expr expr '*'


Terminals, with rules where they appear

    $end (0) 0
    '*' (42) 5
    '+' (43) 4
    error (256)
    INTEGER (258) 3
    NEWLINE (259) 1
    TOKEN_ERROR (260)


Nonterminals, with rules where they appear

    $accept (8)
        on left: 0
    program (9)
        on left: 1 2
        on right: 0 1
    expr (10)
        on left: 3 4 5
        on right: 1 4 5


State 0

    0 $accept: • program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • expr NEWLINE

    $end     shift, and go to state 2
    INTEGER  shift, and go to state 3

    expr  go to state 4


State 2

    0 $accept: program $end •

    $default  accept


State 3

    3 expr: INTEGER •

    $default  reduce using rule 3 (expr)


State 4

    1 program: program expr • NEWLINE
    4 expr: expr • expr '+'
    5     | expr • expr '*'

    INTEGER  shift, and go to state 3
    NEWLINE  shift, and go to state 5

    expr  go to state 6


State 5

    1 program: program expr NEWLINE •

    $default  reduce using rule 1 (program)


State 6

    4 expr: expr • expr '+'
    4     | expr expr • '+'
    5     | expr • expr '*'
    5     | expr expr • '*'

    INTEGER  shift, and go to state 3
    '+'      shift, and go to state 7
    '*'      shift, and go to state 8

    expr  go to state 6


State 7

    4 expr: expr expr '+' •

    $default  reduce using rule 4 (expr)


State 8

    5 expr: expr expr '*' •

    $default  reduce using rule 5 (expr)
